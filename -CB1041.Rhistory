df1 = subset(df, select = -c(Color,
ethylene,
starch,
brix,
weight,
firmness,
titrability))
# B
summary(model1)
#df2
df2 = subset(df, select = -c(Color,
weight,
firmness,
titrability))
model2 = lm(volume ~ depth + brix, data = df2)
summary(model2)
model2 = lm(volume ~ depth + brix + ethylene + starch, data = df2)
summary(model2)
model2 = lm(volume ~ depth + brix + ethylene, data = df2)
summary(model2)
model2 = lm(volume ~ depth + brix, data = df2)
summary(model2)
model2 = lm(volume ~ depth + brix + firmness, data = df2)
#df2
df2 = subset(df, select = -c(Color,
weight,
titrability))
model2 = lm(volume ~ depth + brix + firmness, data = df2)
summary(model2)
#df2
df2 = subset(df, select = -c(Color,
weight))
model2 = lm(volume ~ depth + brix + firmness + titrability, data = df2)
summary(model2)
model2 = lm(volume ~ depth + brix + titrability, data = df2)
summary(model2)
vif(model2)
library(car)
vif(model2)
#df2
df2 = subset(df, select = -c(brix,
titrability,
ethylene,
starch,
firmness,
weight))
# Plot the scatter plot with separate regression lines for each color category
ggplot(df2, aes(x = brix, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "brix", y = "Volume") +
scale_color_discrete(name = "Color") +
theme_bw()
# Plot the scatter plot with separate regression lines for each color category
ggplot(df2, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
# Plot the scatter plot with separate regression lines for each color category
ggplot(df2, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume") +
scale_color_discrete(name = "Color") +
theme_bw()
# Plot the scatter plot with separate regression lines for each color category
ggplot(df, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Color", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
#df2
df2 = subset(df, select = -c(brix,
titrability,
ethylene,
starch,
firmness,
weight))
model2 = lm(volume ~ depth + brix + titrability, data = df)
# Plot the scatter plot with separate regression lines for each color category
ggplot(df, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Color", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
# First, make color a character
df$Color <- factor(df$Color)
# Plot the scatter plot with separate regression lines for each color category
ggplot(df, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Color", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
# Plot the scatter plot with separate regression lines for each color category
ggplot(df, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
# Residuals
hist(residuals(model2), col='steelblue')
#df2
df2 = subset(df, select = -c(brix,
titrability,
ethylene,
starch,
firmness,
weight))
#df2
df2 = subset(df, select = -c(Color
ethylene,
#df2
df2 = subset(df, select = -c(Color,
ethylene,
starch,
firmness,
weight))
# specify the cross-validation method
ctrl = trainControl(method='cv', number=5)
# fit a regression model using k-fold CV for evaluation
modelc = train(volume ~ depth + brix + titrability, data=df2, method='lm', trControl=ctrl)
# view summary of k-fold
print(model)
# view summary of k-fold
print(modelc)
model2 = lm(volume ~ depth + brix + titrability, data = df)
vif(model2)
plot(df)
ggplot(df, aes(x = depth, y = volume)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume") +
theme_bw()
ggplot(df, aes(x = depth, y = volume)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume")
# Homoscedasticity
# Create a plot of residuals against fitted values
plot(model1$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Add a horizontal line at y=0 to aid in detecting non-constant variance
abline(h = 0, col = "red")
#Normality
shapiro.test(model1)
#Normality
shapiro.test(model1$residuals)
# Create a normal probability plot of the residuals
qqnorm(model1$residuals, main = "Normal Probability Plot of Residuals")
# Add a line at 45 degrees to aid in detecting deviation from normality
qqline(model1$residuals, col = "red")
# Independence
#DW
durbinWatsonTest(model1)
# Plot residuals against order of observations
plot(resid(model1) ~ 1:length(resid(model1)), main = "Residuals vs. Order of Observations")
abline(h = 0, col = "red")
# 1 Variable Model
model1 = lm(volume ~ depth, data = df)
model1 = na.omit(model1)
# Plot residuals against order of observations
plot(resid(model1) ~ 1:length(resid(model1)), main = "Residuals vs. Order of Observations")
# 1 Variable Model
model1 = lm(volume ~ depth, data = df)
# Plot residuals against order of observations
plot(resid(model1) ~ 1:length(resid(model1)), main = "Residuals vs. Order of Observations")
abline(h = 0, col = "red")
library(lmtest)
bptest(model1)
# Homoscedasticity
# Create a plot of residuals against fitted values
plot(model1$fitted.values, model$residuals, xlab = "Fitted values", ylab = "Residuals")
# Add a horizontal line at y=0 to aid in detecting non-constant variance
abline(h = 0, col = "red")
# Test for homoscedasticity using the White test
bptest(model1, studentize = FALSE)
# H
# Create a normal probability plot of the residuals
qqnorm(model1$y, main = "Normal Probability Plot of Residuals")
# Add a line at 45 degrees to aid in detecting deviation from normality
qqline(model1$depth, col = "red")
# Fit the Model
model = lm(volume ~ Color +
weight +
firmness +
ethylene +
starch +
depth +
brix +
titrability, data = df)
# 1 Variable Model
model1 = lm(volume ~ depth, data = df)
model1 = na.omit(model1)
# H
# Create a normal probability plot of the residuals
qqnorm(model1$y, main = "Normal Probability Plot of Residuals")
# H
# Create a normal probability plot of the residuals
qqnorm(model1$depth, main = "Normal Probability Plot of Residuals")
# H
# Create a normal probability plot of the residuals
qqnorm(df1$y, main = "Normal Probability Plot of Residuals")
# H
# Create a normal probability plot of the residuals
qqnorm(df1$depth, main = "Normal Probability Plot of Residuals")
# Add a line at 45 degrees to aid in detecting deviation from normality
qqline(df1$depth, col = "red")
# H
# Create a normal probability plot of the residuals
qqnorm(df1$depth, main = "Normal Probability Plot Using the Observed Y")
# Add a line at 45 degrees to aid in detecting deviation from normality
qqline(df1$depth, col = "red")
# Create a plot of residuals versus observed y-values
plot(df1$y, resid(model1), xlab = "Observed y-values", ylab = "Residuals")
# Create a plot of residuals versus observed y-values
plot(df1$depth, resid(model1), xlab = "Observed y-values", ylab = "Residuals")
abline(h = 0, col = "red")
# Get observed and predicted values
observed = df1$depth
predicted = predict(model1)
# Calculate correlation between observed and predicted values
correlation <- cor(observed, predicted)
# Square the correlation to get R-squared
R_squared <- correlation^2
# Print the R-squared value
cat("R-squared:", R_squared, "\n")
R_squared
correlation
setwd("C:/Users/bozma/OneDrive - Washington State University (email.wsu.edu)/Spring '23/STAT 530/Exam1")
knitr::opts_chunk$set(echo = TRUE)
#df2
df2 = subset(df, select = -c(Color,
ethylene,
starch,
firmness,
weight))
#df2
df2 = subset(df, select = -c(Color,
ethylene,
starch,
firmness,
weight))
model2 = lm(volume ~ depth + brix + titrability, data = df)
library('readxl')
df = read_xlsx('2023_exam_1_data.xlsx')
library('caret')
library('caret')
library('ggplot2')
library('tidyverse')
library('corrplot')
library('GGally')
library('lmtest')
library('car')
#df2
df2 = subset(df, select = -c(Color,
ethylene,
starch,
firmness,
weight))
model2 = lm(volume ~ depth + brix + titrability, data = df)
# First, make color a character
df$Color <- factor(df$Color)
# Plot the scatter plot with separate regression lines for each color category
ggplot(df, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
vif(model2)
#df2
df2 = subset(df, select = -c(Color,
ethylene,
starch,
firmness,
weight))
# Plot the scatter plot with separate regression lines for each color category
ggplot(df, aes(x = depth, y = volume, color = Color)) +
geom_jitter(width = 0.2) +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
labs(x = "Depth", y = "Volume", color = "Color") +
scale_color_discrete(name = "Color") +
theme_bw()
# Residuals
hist(residuals(model2), col='steelblue')
# Print the R-squared value
cat("R-squared:", R_squared, "\n")
# Square the correlation to get R-squared
R_squared <- correlation^2
# Get observed and predicted values
observed = df1$depth
predicted = predict(model1)
#df1
df1 = subset(df, select = -c(Color,
ethylene,
starch,
brix,
weight,
firmness,
titrability))
# 1 Variable Model
model1 = lm(volume ~ depth, data = df)
model1 = na.omit(model1)
# Get observed and predicted values
observed = df1$depth
predicted = predict(model1)
# Calculate correlation between observed and predicted values
correlation <- cor(observed, predicted)
# Square the correlation to get R-squared
R_squared <- correlation^2
# Print the R-squared value
cat("R-squared:", R_squared, "\n")
model2
sumary(model2)
summary(model2)
setwd("C:/Users/bozma/OneDrive - Washington State University (email.wsu.edu)/Spring '23/STAT 530/Homeworks/HW4")
knitr::opts_chunk$set(echo = TRUE)
head(df)
head(df)
df.head()
fitted <- lm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium + gender, data = df)
library(readxl)
df <- read_xlsx('HW_3_4.xlsx')
fitted <- lm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium + gender, data = df)
library(readxl)
df <- read_xlsx('HW_3_4.xlsx')
fitted <- lm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium + gender, data = df)
fitted <- lm(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + Gender, data = df)
summary(fitted)
library(car)
vif(fitted)
library(MASS)
fitted.r = rlm(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + gender, data = df, method = "M", scale.est = "Huber")
library(MASS)
fitted.r = rlm(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + Gender, data = df, method = "M", scale.est = "Huber")
summary(fitted.r)
rs = rstudent (fitted.r)
absrs = abs (rs)
hweights = data.frame (residuals= fitted.r$residuals, stud_resids = rs,
abs_stdres = absrs, huber_weights = fitted.r$w)
hweights2 = hweights[order (fitted.rs$w),]
rs = rstudent (fitted.r)
absrs = abs (rs)
hweights = data.frame (residuals= fitted.rs$residuals, stud_resids = rs,
abs_stdres = absrs, huber_weights = fitted.r$w)
rs = rstudent (fitted.rs)
r = rstudent (fit.r)
r = rstudent (fitted.r)
absr = abs (r)
hweights = data.frame (residuals= fitted.r$residuals, stud_resids = r,
abs_stdres = absr, huber_weights = fitted.r$w)
hweights2 = hweights[order (fitted.r$w),]
hweights2[ 1 :20 , ]
plot(fit.r$residuals)
plot(fitted.r$residuals)
fit.ridge = lm.ridge(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + Gender, data = df, lambda = seq(0.01, 0.1, 0.01))
round(fit.ridge$coef, 3)
plot(fit.ridge)
y = df$Calories
x1 = df$Weight
x2 = df$Height
x3 = df$Protein
x4 = df$Carbohydrates
x5 = df$Calcium
x6 = df$Gender
N = length(y)
Y = c(y)
X = cbind(x1, x2, x3, x4, x5, x6)
library(genridge)
install.packages('genridge')
y = df$Calories
x1 = df$Weight
x2 = df$Height
x3 = df$Protein
x4 = df$Carbohydrates
x5 = df$Calcium
x6 = df$Gender
N = length(y)
Y = c(y)
X = cbind(x1, x2, x3, x4, x5, x6)
library(genridge)
fit.ridge1 = ridge(Y, X, lambda = seq(0.01, 0.1, 0.01))
vif.ridge1 = vif(fit.ridge1)
round(vif.ridge1, 3)
pca <- princomp(df[, c(2:6,8)], center = TRUE, scale. = TRUE)
summary(pca)
install.packages('ggfortify')
plot(pca, type='l)
library(ggfortify)
plot(pca, type='l)
library(ggfortify)
plot(pca, type='l)
library(ggfortify)
plot(pca, type='l')
install.packages('psych')
library(psych)
corm <- cor(df[])
fcload <- fa(r = corm, nfactors = 6)
install.packages('GPArotation')
library(psych)
corm <- cor(df[])
fcload <- fa(r = corm, nfactors = 6)
prl = fa.parallel(df, fm='minres', fa='fa')
fittedpca <- lm(formula = y ~ f1 + f2)
fitpca <- lm(formula = y ~ f1 + f2)
corm <- cor(df[])
fcload <- fa(r = corm, nfactors = 6)
fitpca <- lm(formula = y ~ f1 + f2)
library(psych)
corm <- cor(df[])
fcload <- fa(r = corm, nfactors = 6)
prl = fa.parallel(df, fm='minres', fa='fa')
r = fit$residuals
r = fitted$residuals
p = fitted$fitted.values
data.fit = data.frame(r, p, y)
library(ggplot2)
p1 = ggplot(data = data.fit, aes(x = y, y = r))+
geom_point()+
labs(title = "Residual vs Predicted plot", x = "Predicted", y = "Residuals")
p2 = ggplot(data = data.fit, aes(x = p, y = r)) +
geom_point()+
labs(title = "Residuals vs Observed plot", x = "Observed", y = "Residuals")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2, nrow = 1)
shapiro.test(r)
shapiro.test(y)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
df <- read_xlsx('HW_3_4.xlsx')
fitted <- lm(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + Gender, data = df)
summary(fitted)
par(mfrow =c(1, 2))
plot(fit, 3)
par(mfrow =c(1, 2))
plot(fitted, 3)
plot(fitted, 4, id.n = 5)
library(car)
vif(fitted)
library(MASS)
fitted.r = rlm(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + Gender, data = df, method = "M", scale.est = "Huber")
summary(fitted.r)
r = rstudent (fitted.r)
absr = abs (r)
hweights = data.frame (residuals= fitted.r$residuals, stud_resids = r,
abs_stdres = absr, huber_weights = fitted.r$w)
hweights2 = hweights[order (fitted.r$w),]
hweights2[ 1 :20 , ]
plot(fitted.r$residuals)
fit.ridge = lm.ridge(Calories ~ Weight + Height + Protein + Carbohydrates + Calcium + Gender, data = df, lambda = seq(0.01, 0.1, 0.01))
round(fit.ridge$coef, 3)
plot(fit.ridge)
y = df$Calories
x1 = df$Weight
x2 = df$Height
x3 = df$Protein
x4 = df$Carbohydrates
x5 = df$Calcium
x6 = df$Gender
N = length(y)
Y = c(y)
X = cbind(x1, x2, x3, x4, x5, x6)
library(genridge)
fit.ridge1 = ridge(Y, X, lambda = seq(0.01, 0.1, 0.01))
vif.ridge1 = vif(fit.ridge1)
round(vif.ridge1, 3)
pca <- princomp(df[, c(2:6,8)], center = TRUE, scale. = TRUE)
summary(pca)
library(ggfortify)
plot(pca, type='l')
library(psych)
corm <- cor(df[])
fcload <- fa(r = corm, nfactors = 6)
prl = fa.parallel(df, fm='minres', fa='fa')
fitpca <- lm(formula = y ~ f1 + f2)
r = fitted$residuals
p = fitted$fitted.values
data.fit = data.frame(r, p, y)
library(ggplot2)
p1 = ggplot(data = data.fit, aes(x = y, y = r))+
geom_point()+
labs(title = "Residual vs Predicted plot", x = "Predicted", y = "Residuals")
p2 = ggplot(data = data.fit, aes(x = p, y = r)) +
geom_point()+
labs(title = "Residuals vs Observed plot", x = "Observed", y = "Residuals")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2, nrow = 1)
shapiro.test(r)
shapiro.test(y)
knitr::opts_chunk$set(echo = TRUE)
heart <- read_xlsx('heard_data.xlsx')
library(readxl)
heart <- read_xlsx('heard_data.xlsx')
getwd()
setwd("C:/Users/bozma/OneDrive - Washington State University (email.wsu.edu)/Spring '23/STAT 530/Final Project")
heart <- read_xlsx('heard_data.xlsx')
getwd()
knitr::opts_chunk$set(echo = TRUE)
heart <- read_xlsx('heard_data.xlsx')
knitr::opts_chunk$set(echo = TRUE)
heart <- read_xlsx('heard_data.xlsx')
library(readxl)
heart <- read_xlsx('heard_data.xlsx')
getwd()
setwd("C:/Users/bozma/OneDrive - Washington State University (email.wsu.edu)/Spring23/STAT-530/Final-Project")
heart <- read_xlsx('heard_data.xlsx')
blogdown:::serve_site()
